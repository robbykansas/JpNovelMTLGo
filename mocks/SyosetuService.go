// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	model "jpnovelmtlgo/internal/model"

	mock "github.com/stretchr/testify/mock"

	request "jpnovelmtlgo/internal/model/request"

	response "jpnovelmtlgo/internal/model/response"
)

// SyosetuService is an autogenerated mock type for the SyosetuService type
type SyosetuService struct {
	mock.Mock
}

// EnEpub provides a mock function with given fields: params
func (_m *SyosetuService) EnEpub(params *request.ConvertNovelRequest) (*model.DefaultResponse, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for EnEpub")
	}

	var r0 *model.DefaultResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*request.ConvertNovelRequest) (*model.DefaultResponse, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(*request.ConvertNovelRequest) *model.DefaultResponse); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DefaultResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*request.ConvertNovelRequest) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChapterPage provides a mock function with given fields: params
func (_m *SyosetuService) GetChapterPage(params *request.ChapterNovelRequest) (*model.BaseResponse[*response.GetChapterPageResponse], error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for GetChapterPage")
	}

	var r0 *model.BaseResponse[*response.GetChapterPageResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(*request.ChapterNovelRequest) (*model.BaseResponse[*response.GetChapterPageResponse], error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(*request.ChapterNovelRequest) *model.BaseResponse[*response.GetChapterPageResponse]); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BaseResponse[*response.GetChapterPageResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(*request.ChapterNovelRequest) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JpEpub provides a mock function with given fields: params
func (_m *SyosetuService) JpEpub(params *request.ConvertNovelRequest) (*model.DefaultResponse, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for JpEpub")
	}

	var r0 *model.DefaultResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*request.ConvertNovelRequest) (*model.DefaultResponse, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(*request.ConvertNovelRequest) *model.DefaultResponse); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DefaultResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*request.ConvertNovelRequest) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChapterNovel provides a mock function with given fields: params
func (_m *SyosetuService) ListChapterNovel(params *request.ChapterNovelRequest) (*model.BaseResponse[[]request.TranslateListRequest], error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for ListChapterNovel")
	}

	var r0 *model.BaseResponse[[]request.TranslateListRequest]
	var r1 error
	if rf, ok := ret.Get(0).(func(*request.ChapterNovelRequest) (*model.BaseResponse[[]request.TranslateListRequest], error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(*request.ChapterNovelRequest) *model.BaseResponse[[]request.TranslateListRequest]); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BaseResponse[[]request.TranslateListRequest])
		}
	}

	if rf, ok := ret.Get(1).(func(*request.ChapterNovelRequest) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSyosetuService creates a new instance of SyosetuService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSyosetuService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SyosetuService {
	mock := &SyosetuService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
