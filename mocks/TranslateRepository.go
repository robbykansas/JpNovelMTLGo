// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	model "jpnovelmtlgo/internal/model"

	mock "github.com/stretchr/testify/mock"

	request "jpnovelmtlgo/internal/model/request"

	response "jpnovelmtlgo/internal/model/response"
)

// TranslateRepository is an autogenerated mock type for the TranslateRepository type
type TranslateRepository struct {
	mock.Mock
}

// TranslateChapter provides a mock function with given fields: params
func (_m *TranslateRepository) TranslateChapter(params *request.TranslateChapterRequest) (*response.GetChapterPageResponse, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for TranslateChapter")
	}

	var r0 *response.GetChapterPageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*request.TranslateChapterRequest) (*response.GetChapterPageResponse, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(*request.TranslateChapterRequest) *response.GetChapterPageResponse); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.GetChapterPageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*request.TranslateChapterRequest) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TranslateInfo provides a mock function with given fields: params
func (_m *TranslateRepository) TranslateInfo(params *request.NovelInfo) (*response.TranslatedInfoResponse, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for TranslateInfo")
	}

	var r0 *response.TranslatedInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*request.NovelInfo) (*response.TranslatedInfoResponse, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(*request.NovelInfo) *response.TranslatedInfoResponse); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.TranslatedInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*request.NovelInfo) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TranslateList provides a mock function with given fields: params
func (_m *TranslateRepository) TranslateList(params []request.TranslateListRequest) (*model.BaseResponse[[]request.TranslateListRequest], error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for TranslateList")
	}

	var r0 *model.BaseResponse[[]request.TranslateListRequest]
	var r1 error
	if rf, ok := ret.Get(0).(func([]request.TranslateListRequest) (*model.BaseResponse[[]request.TranslateListRequest], error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func([]request.TranslateListRequest) *model.BaseResponse[[]request.TranslateListRequest]); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BaseResponse[[]request.TranslateListRequest])
		}
	}

	if rf, ok := ret.Get(1).(func([]request.TranslateListRequest) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TranslateListChapter provides a mock function with given fields: params
func (_m *TranslateRepository) TranslateListChapter(params []request.ChapterContent) ([]response.TranslatedListChapterResponse, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for TranslateListChapter")
	}

	var r0 []response.TranslatedListChapterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func([]request.ChapterContent) ([]response.TranslatedListChapterResponse, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func([]request.ChapterContent) []response.TranslatedListChapterResponse); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.TranslatedListChapterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func([]request.ChapterContent) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTranslateRepository creates a new instance of TranslateRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTranslateRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TranslateRepository {
	mock := &TranslateRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
